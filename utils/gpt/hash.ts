import * as crypto from 'crypto';
import { shuffleStr } from '../generator';

// ENCRYPT DATA AND RETURN THE IV... MUST STORE THE HASH AND IV TOGETHER
export function encrypt(data: any, key?: string | Buffer): { iv: Buffer, encrypted: string } {
  let iv = crypto.randomBytes(16);
  key = process.env.CRYPTO_SECRET_KEY ? Buffer.from(process.env.CRYPTO_SECRET_KEY) : Buffer.isBuffer(key) ? key : Buffer.from(key);
  let cipher = crypto.createCipheriv('aes-256-ecb', key, iv);
  let encrypted = cipher.update(data, 'utf8', 'base64');
  encrypted += cipher.final('base64');
  return { iv, encrypted };
}

// DECRYPT DATA WITH AN IV
export function decrypt(data: any, iv: Buffer, key?: string | Buffer): string {
  key = process.env.CRYPTO_SECRET_KEY ? Buffer.from(process.env.CRYPTO_SECRET_KEY) : Buffer.isBuffer(key) ? key : Buffer.from(key);
  let decipher = crypto.createDecipheriv('aes-256-ecb', key, iv);
  let decrypted = decipher.update(data, 'base64', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}
// let key = Buffer.from('my-secret-key', 'utf8');
// let { iv, encrypted } = encrypt('hello world', key);
// let decrypted = decrypt(encrypted, key, iv);



// HASH GENERATED BY CHATGPT
// Define the hashing function
export function gptHash(input: string): number {
  // Define the desired length of the output string
  const OUTPUT_LENGTH = 10;

  // Define a prime number to use as the modulus
  const PRIME = 31;

  // Initialize the hash value to a prime number
  let hash = PRIME;

  // Loop through each character in the input string
  for (let i = 0; i < input.length; i++) {
    // Get the ASCII value of the character
    let charCode = input.charCodeAt(i);

    // Add the ASCII value to the hash, multiplied by the prime number
    hash = (hash * PRIME + charCode) % Number.MAX_SAFE_INTEGER;
  }

  // Convert the hash value to a string
  let hashString = hash.toString();

  let output: string;

  // Pad the string with zeros until it reaches the desired length
  while (hashString.length < OUTPUT_LENGTH + 1) {
    const randomNum = Math.floor(Math.random()*10).toString()
    output = randomNum + hashString;
  }

  // Return the hashed string
  return Number(shuffleStr(output));
}



// CHAT GPT ROT TYPE CYPHER FUNCTIONS TO ENCRYPT/DECRYPT STRING (Can be any ASCII character)
// ** NOTE: Based on (crackable) "Caesar cypher" **
export function rotEncypt(text: string, key?: string): string {
  key = key ? key : process.env.CRYPTO_SECRET_KEY || "tk2W8JG1rt5k1cs2Dc69ymiDUoIQs0La";
  let result = "";

  for (let i = 0, j = 0; i < text.length; i++, j++) {
    if (j >= key.length) {
      j = 0;
    }

    result += String.fromCharCode(
      (text.charCodeAt(i) + key.charCodeAt(j)) % 256
    );
  }

  return result;
}

export function rotDecrypt(text: string, key?: string): string {
  key = key ? key : process.env.CRYPTO_SECRET_KEY || "tk2W8JG1rt5k1cs2Dc69ymiDUoIQs0La";
  let result = "";

  for (let i = 0, j = 0; i < text.length; i++, j++) {
    if (j >= key.length) {
      j = 0;
    }

    result += String.fromCharCode(
      (text.charCodeAt(i) + 256 - key.charCodeAt(j)) % 256
    );
  }

  return result;
}